__author__ = "kanoy"
__version__ = "2022.02.08"

import rhinoscriptsyntax as rs
import ghpythonlib.treehelpers as th

def maze(matrix, start_cord, end_cord):
    a = matrix
    zoom = 20
    borders = 6
    start = start_cord
    end = end_cord

    
    m = []
    for i in range(len(a)):
        m.append([])
        for j in range(len(a[i])):
            m[-1].append(0)
    i,j = start
    m[i][j] = 1
    
    def make_step(k):
        for i in range(len(m)):
            for j in range(len(m[i])):
                if m[i][j] == k:
                    if i>0 and m[i-1][j] == 0 and a[i-1][j] == 0:
                        m[i-1][j] = k + 1
                    if j>0 and m[i][j-1] == 0 and a[i][j-1] == 0:
                        m[i][j-1] = k + 1
                    if i<len(m)-1 and m[i+1][j] == 0 and a[i+1][j] == 0:
                        m[i+1][j] = k + 1
                    if j<len(m[i])-1 and m[i][j+1] == 0 and a[i][j+1] == 0:
                        m[i][j+1] = k + 1
    
    m = []
    for i in range(len(a)):
        m.append([])
        for j in range(len(a[i])):
            m[-1].append(0)
    i,j = start
    m[i][j] = 1
    
    k = 0
    while m[end[0]][end[1]] == 0:
        k += 1
        make_step(k)
    
    i, j = end
    k = m[i][j]
    the_path = [(i,j)]
    while k > 1:
      if i > 0 and m[i - 1][j] == k-1:
        i, j = i-1, j
        the_path.append((i, j))
        k-=1
      elif j > 0 and m[i][j - 1] == k-1:
        i, j = i, j-1
        the_path.append((i, j))
        k-=1
      elif i < len(m) - 1 and m[i + 1][j] == k-1:
        i, j = i+1, j
        the_path.append((i, j))
        k-=1
      elif j < len(m[i]) - 1 and m[i][j + 1] == k-1:
        i, j = i, j+1
        the_path.append((i, j))
        k -= 1
    

    #print_m(m)
    #print(len(the_path))
    return the_path

#----------------
# Matrix

inp = th.tree_to_list(x, None)

#----------------
# End Points

y = int(y)
div = w
eline = (int(y) // div)
epos = (int(y) - (eline * div))

#print(int(eline), int(epos))

#----------------
# Start Points

v = int(v)
div = w
sline = (int(v) // div)
spos = (int(v) - (sline * div))
#print(int(sline), int(spos))

#----------------
# Call Maze Function

path = maze(inp, (int(sline), int(spos)), (int(eline), int(epos)))

#----------------
# Outputs

debug = path
print(debug)

output = path

list = []
